# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dEXUGpPOmWYtJLdcxkvTwfOSgD4VjR4n
"""



import pandas as pd
import numpy as np
# Load dataset
df = pd.read_csv('IMDB-Movie-Data.csv')

# 11. Find the number of rows and columns in the dataset.
shape = df.shape
print(shape)

# 12. Display the first 5 rows of the dataset.
head_5 = df.head()
print(head_5)

# 13. Find the list of unique genres.
unique_genres = df['Genre'].unique()
print(unique_genres)

# 14. Find the average rating of all movies.
average_rating = df['Rating'].mean()
print(average_rating)

# 15. Find the movie with the highest revenue.
highest_revenue_movie = df.loc[df['Revenue (Millions)'].idxmax()]
print(highest_revenue_movie)

# 16. Find the movie with the lowest revenue.
lowest_revenue_movie = df.loc[df['Revenue (Millions)'].idxmin()]
print(lowest_revenue_movie)

# 17. Calculate the total revenue generated by all movies.
total_revenue = df['Revenue (Millions)'].sum()
print("\n17. Total revenue generated by all movies (in millions):", total_revenue)

# 18. How many movies have a rating above 8?
movies_above_8 = df[df['Rating'] > 8].shape[0]
print("\n18. Number of movies with rating above 8:", movies_above_8)

# 19. List the top 10 movies based on Revenue.
top_10_revenue = df.sort_values(by='Revenue (Millions)', ascending=False).head(10)
print("\n19. Top 10 movies based on revenue:\n", top_10_revenue[['Title', 'Revenue (Millions)']])

# 20. Find how many movies were released each year.
movies_per_year = df['Year'].value_counts()
print("\n20. Number of movies released each year:\n", movies_per_year)

# 1. Find the average revenue per year.
avg_revenue_per_year = df.groupby('Year')['Revenue (Millions)'].mean()
print("\n1. Average revenue per year:\n", avg_revenue_per_year)

# 2. Find the average runtime of movies.
avg_runtime = df['Runtime (Minutes)'].mean()
print("\n2. Average runtime of movies (in minutes):", avg_runtime)

# 3. Find the director with the most movies.
most_movies_director = df['Director'].value_counts().idxmax()
print("\n3. Director with most movies:", most_movies_director)

# 4. How many movies have the genre 'Action'?
action_movies_count = df['Genre'].str.contains('Action').sum()
print("\n4. Number of Action movies:", action_movies_count)

# 5. Find the correlation between Rating and Revenue.
correlation_rating_revenue = df['Rating'].corr(df['Revenue (Millions)'])
print("\n5. Correlation between Rating and Revenue:", correlation_rating_revenue)

# 6. Find the percentage of movies with a rating greater than 7.
percent_rating_above_7 = (df[df['Rating'] > 7].shape[0] / df.shape[0]) * 100
print("\n6. Percentage of movies with rating greater than 7:", percent_rating_above_7)

# 7. Find the movie(s) with the longest runtime.
longest_runtime_movie = df.loc[df['Runtime (Minutes)'].idxmax()]
print("\n7. Movie with the longest runtime:\n", longest_runtime_movie)

# 8. Replace all NaN values in Revenue with the column mean.
df['Revenue (Millions)'].fillna(df['Revenue (Millions)'].mean(), inplace=True)
print("\n8. Replaced all NaN values in Revenue with column mean.")

# 9. Group movies by Director and find the average rating of their movies.
avg_rating_per_director = df.groupby('Director')['Rating'].mean()
print("\n9. Average rating per director:\n", avg_rating_per_director)

# 10. Find the number of missing values in each column.
missing_values = df.isnull().sum()
print("\n10. Number of missing values in each column:\n", missing_values)